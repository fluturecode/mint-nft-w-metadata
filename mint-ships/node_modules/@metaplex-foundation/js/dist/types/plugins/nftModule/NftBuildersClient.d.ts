import { ApproveNftCollectionAuthorityBuilderParams, ApproveNftDelegateBuilderParams, ApproveNftUseAuthorityBuilderParams, CreateNftBuilderParams, CreateSftBuilderParams, DeleteNftBuilderParams, FreezeDelegatedNftBuilderParams, LockNftBuilderParams, MigrateToSizedCollectionNftBuilderParams, MintNftBuilderParams, PrintNewEditionBuilderParams, RevokeNftCollectionAuthorityBuilderParams, RevokeNftDelegateBuilderParams, RevokeNftUseAuthorityBuilderParams, ThawDelegatedNftBuilderParams, TransferNftBuilderParams, UnlockNftBuilderParams, UnverifyNftCollectionBuilderParams, UnverifyNftCreatorBuilderParams, UpdateNftBuilderParams, UseNftBuilderParams, VerifyNftCollectionBuilderParams, VerifyNftCreatorBuilderParams } from '@metaplex-foundation/js/dist/types/plugins/nftModule/operations';
import type { Metaplex } from '../../Metaplex';
import { TransactionBuilderOptions } from '@metaplex-foundation/js/dist/types/utils';
/**
 * This client allows you to access the underlying Transaction Builders
 * for the write operations of the NFT module.
 *
 * @see {@link NftClient}
 * @group Module Builders
 * */
export declare class NftBuildersClient {
    protected readonly metaplex: Metaplex;
    constructor(metaplex: Metaplex);
    /** {@inheritDoc createNftBuilder} */
    create(input: CreateNftBuilderParams, options?: TransactionBuilderOptions): Promise<import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<import("@metaplex-foundation/js/dist/types/plugins/nftModule/operations").CreateNftBuilderContext>>;
    /** {@inheritDoc createSftBuilder} */
    createSft(input: CreateSftBuilderParams, options?: TransactionBuilderOptions): Promise<import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<import("@metaplex-foundation/js/dist/types/plugins/nftModule/operations").CreateSftBuilderContext>>;
    /** {@inheritDoc printNewEditionBuilder} */
    printNewEdition(input: PrintNewEditionBuilderParams, options?: TransactionBuilderOptions): Promise<import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<import("@metaplex-foundation/js/dist/types/plugins/nftModule/operations").PrintNewEditionBuilderContext>>;
    /** {@inheritDoc updateNftBuilder} */
    update(input: UpdateNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc deleteNftBuilder} */
    delete(input: DeleteNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc approveNftDelegateBuilder} */
    delegate(input: ApproveNftDelegateBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc revokeNftDelegateBuilder} */
    revoke(input: RevokeNftDelegateBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc useNftBuilder} */
    use(input: UseNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc approveNftUseAuthorityBuilder} */
    approveUseAuthority(input: ApproveNftUseAuthorityBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc revokeNftUseAuthorityBuilder} */
    revokeUseAuthority(input: RevokeNftUseAuthorityBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc verifyNftCreatorBuilder} */
    verifyCreator(input: VerifyNftCreatorBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc unverifyNftCreatorBuilder} */
    unverifyCreator(input: UnverifyNftCreatorBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc verifyNftCollectionBuilder} */
    verifyCollection(input: VerifyNftCollectionBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc unverifyNftCollectionBuilder} */
    unverifyCollection(input: UnverifyNftCollectionBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc approveNftCollectionAuthorityBuilder} */
    approveCollectionAuthority(input: ApproveNftCollectionAuthorityBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc revokeNftCollectionAuthorityBuilder} */
    revokeCollectionAuthority(input: RevokeNftCollectionAuthorityBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc migrateToSizedCollectionNftBuilder} */
    migrateToSizedCollection(input: MigrateToSizedCollectionNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc lockNftBuilder} */
    lock(input: LockNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc unlockNftBuilder} */
    unlock(input: UnlockNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc mintNftBuilder} */
    mint(input: MintNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc transferNftBuilder} */
    transfer(input: TransferNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc freezeDelegatedNftBuilder} */
    freezeDelegatedNft(input: FreezeDelegatedNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
    /** {@inheritDoc thawDelegatedNftBuilder} */
    thawDelegatedNft(input: ThawDelegatedNftBuilderParams, options?: TransactionBuilderOptions): import("@metaplex-foundation/js/dist/types/utils").TransactionBuilder<object>;
}
