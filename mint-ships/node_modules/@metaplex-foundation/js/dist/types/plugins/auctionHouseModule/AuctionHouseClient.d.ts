import { AuctionHouseBuildersClient } from '@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/AuctionHouseBuildersClient';
import { CancelBidInput, CancelListingInput, CreateAuctionHouseInput, CreateBidInput, CreateListingInput, DepositToBuyerAccountInput, DirectBuyInput, DirectSellInput, ExecuteSaleInput, FindAuctionHouseByAddressInput, FindAuctionHouseByCreatorAndMintInput, FindBidByReceiptInput, FindBidByTradeStateInput, FindBidsInput, FindListingByReceiptInput, FindListingByTradeStateInput, FindListingsInput, FindPurchaseByReceiptInput, FindPurchaseByTradeStateInput, FindPurchasesInput, GetBuyerBalanceInput, LoadBidInput, LoadListingInput, LoadPurchaseInput, UpdateAuctionHouseInput, WithdrawFromBuyerAccountInput, WithdrawFromFeeAccountInput, WithdrawFromTreasuryAccountInput } from '@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations';
import { AuctionHousePdasClient } from '@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/AuctionHousePdasClient';
import type { Metaplex } from '../../Metaplex';
import { OperationOptions } from '@metaplex-foundation/js/dist/types/types';
/**
 * This is a client for the Auction House module.
 *
 * It enables us to interact with the Auction House program in order to
 * create and update Auction House to configure a marketplace as well to allow
 * users to list, bid and execute sales.
 *
 * You may access this client via the `auctionHouse()` method of your `Metaplex` instance.
 *
 * ```ts
 * const auctionHouseClient = metaplex.auctionHouse();
 * ```
 *
 * @example
 * You can create a new Auction House with minimum input like so.
 * By default, the current identity of the Metaplex instance will be
 * the authority of the Auction House.
 *
 * ```ts
 * const { auctionHouse } = await metaplex
 *   .auctionHouse()
 *   .create({
 *     sellerFeeBasisPoints: 500, // 5% royalties
 *   };
 * ```
 *
 * @see {@link AuctionHouse} The `AuctionHouse` model
 * @group Modules
 */
export declare class AuctionHouseClient {
    protected readonly metaplex: Metaplex;
    constructor(metaplex: Metaplex);
    /**
     * You may use the `builders()` client to access the
     * underlying Transaction Builders of this module.
     *
     * ```ts
     * const buildersClient = metaplex.auctions().builders();
     * ```
     */
    builders(): AuctionHouseBuildersClient;
    /**
     * You may use the `pdas()` client to build PDAs related to this module.
     *
     * ```ts
     * const pdasClient = metaplex.auctionHouse().pdas();
     * ```
     */
    pdas(): AuctionHousePdasClient;
    /** {@inheritDoc createBidOperation} */
    bid(input: CreateBidInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").CreateBidOutput>;
    /** {@inheritDoc directBuyOperation} */
    buy(input: DirectBuyInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").DirectBuyOutput>;
    /** {@inheritDoc cancelBidOperation} */
    cancelBid(input: CancelBidInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").CancelBidOutput>;
    /** {@inheritDoc cancelListingOperation} */
    cancelListing(input: CancelListingInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").CancelListingOutput>;
    /** {@inheritDoc createAuctionHouseOperation} */
    create(input: CreateAuctionHouseInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").CreateAuctionHouseOutput>;
    /** {@inheritDoc depositToBuyerAccountOperation} */
    depositToBuyerAccount(input: DepositToBuyerAccountInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").DepositToBuyerAccountOutput>;
    /** {@inheritDoc executeSaleOperation} */
    executeSale(input: ExecuteSaleInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").ExecuteSaleOutput>;
    /** {@inheritDoc findAuctionHouseByAddressOperation} */
    findByAddress(input: FindAuctionHouseByAddressInput, options?: OperationOptions): Promise<Readonly<{
        model: "auctionHouse";
        address: import("@metaplex-foundation/js/dist/types/types").Pda;
        creatorAddress: import("@solana/web3.js").PublicKey;
        authorityAddress: import("@solana/web3.js").PublicKey;
        treasuryMint: import("@metaplex-foundation/js/dist/types/plugins").Mint;
        feeAccountAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        treasuryAccountAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        feeWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        treasuryWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        sellerFeeBasisPoints: number;
        requiresSignOff: boolean;
        canChangeSalePrice: boolean;
        isNative: boolean;
        scopes: import("@metaplex-foundation/mpl-auction-house").AuthorityScope[];
    } & {
        hasAuctioneer: false;
    }> | Readonly<{
        model: "auctionHouse";
        address: import("@metaplex-foundation/js/dist/types/types").Pda;
        creatorAddress: import("@solana/web3.js").PublicKey;
        authorityAddress: import("@solana/web3.js").PublicKey;
        treasuryMint: import("@metaplex-foundation/js/dist/types/plugins").Mint;
        feeAccountAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        treasuryAccountAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        feeWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        treasuryWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        sellerFeeBasisPoints: number;
        requiresSignOff: boolean;
        canChangeSalePrice: boolean;
        isNative: boolean;
        scopes: import("@metaplex-foundation/mpl-auction-house").AuthorityScope[];
    } & {
        hasAuctioneer: true;
        auctioneer: {
            address: import("@solana/web3.js").PublicKey;
            authority: import("@solana/web3.js").PublicKey;
        };
    }>>;
    /** {@inheritDoc findAuctionHouseByCreatorAndMintOperation} */
    findByCreatorAndMint(input: FindAuctionHouseByCreatorAndMintInput, options?: OperationOptions): Promise<Readonly<{
        model: "auctionHouse";
        address: import("@metaplex-foundation/js/dist/types/types").Pda;
        creatorAddress: import("@solana/web3.js").PublicKey;
        authorityAddress: import("@solana/web3.js").PublicKey;
        treasuryMint: import("@metaplex-foundation/js/dist/types/plugins").Mint;
        feeAccountAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        treasuryAccountAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        feeWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        treasuryWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        sellerFeeBasisPoints: number;
        requiresSignOff: boolean;
        canChangeSalePrice: boolean;
        isNative: boolean;
        scopes: import("@metaplex-foundation/mpl-auction-house").AuthorityScope[];
    } & {
        hasAuctioneer: false;
    }> | Readonly<{
        model: "auctionHouse";
        address: import("@metaplex-foundation/js/dist/types/types").Pda;
        creatorAddress: import("@solana/web3.js").PublicKey;
        authorityAddress: import("@solana/web3.js").PublicKey;
        treasuryMint: import("@metaplex-foundation/js/dist/types/plugins").Mint;
        feeAccountAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        treasuryAccountAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        feeWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        treasuryWithdrawalDestinationAddress: import("@solana/web3.js").PublicKey;
        sellerFeeBasisPoints: number;
        requiresSignOff: boolean;
        canChangeSalePrice: boolean;
        isNative: boolean;
        scopes: import("@metaplex-foundation/mpl-auction-house").AuthorityScope[];
    } & {
        hasAuctioneer: true;
        auctioneer: {
            address: import("@solana/web3.js").PublicKey;
            authority: import("@solana/web3.js").PublicKey;
        };
    }>>;
    /** {@inheritDoc findBidByReceiptOperation} */
    findBidByReceipt(input: FindBidByReceiptInput, options?: OperationOptions): Promise<Readonly<{
        model: "bid";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        buyerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
        purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
        canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
    } & {
        isPublic: false;
        asset: import("@metaplex-foundation/js/dist/types/plugins").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins").NftWithToken;
    }> | Readonly<{
        model: "bid";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        buyerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
        purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
        canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
    } & {
        isPublic: true;
        asset: import("@metaplex-foundation/js/dist/types/plugins").Sft | import("@metaplex-foundation/js/dist/types/plugins").Nft;
    }>>;
    /** {@inheritDoc findBidByTradeStateOperation} */
    findBidByTradeState(input: FindBidByTradeStateInput, options?: OperationOptions): Promise<Readonly<{
        model: "bid";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        buyerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
        purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
        canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
    } & {
        isPublic: false;
        asset: import("@metaplex-foundation/js/dist/types/plugins").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins").NftWithToken;
    }> | Readonly<{
        model: "bid";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        buyerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
        purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
        canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
    } & {
        isPublic: true;
        asset: import("@metaplex-foundation/js/dist/types/plugins").Sft | import("@metaplex-foundation/js/dist/types/plugins").Nft;
    }>>;
    /** {@inheritDoc findBidsOperation} */
    findBids(input: FindBidsInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").FindBidsOutput>;
    /** {@inheritDoc findListingByTradeStateOperation} */
    findListingByTradeState(input: FindListingByTradeStateInput, options?: OperationOptions): Promise<Readonly<{
        model: "listing";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        asset: import("@metaplex-foundation/js/dist/types/plugins").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins").NftWithToken;
        tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        sellerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
        purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
        canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
    }>>;
    /** {@inheritDoc findListingByReceiptOperation} */
    findListingByReceipt(input: FindListingByReceiptInput, options?: OperationOptions): Promise<Readonly<{
        model: "listing";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        asset: import("@metaplex-foundation/js/dist/types/plugins").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins").NftWithToken;
        tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        sellerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
        purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
        canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
    }>>;
    /** {@inheritDoc findListingsOperation} */
    findListings(input: FindListingsInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").FindListingsOutput>;
    /** {@inheritDoc findPurchaseByTradeStateOperation} */
    findPurchaseByTradeState(input: FindPurchaseByTradeStateInput, options?: OperationOptions): Promise<Readonly<{
        model: "purchase";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        asset: import("@metaplex-foundation/js/dist/types/plugins").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins").NftWithToken;
        buyerAddress: import("@solana/web3.js").PublicKey;
        sellerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
    }>>;
    /** {@inheritDoc findPurchaseByReceiptOperation} */
    findPurchaseByReceipt(input: FindPurchaseByReceiptInput, options?: OperationOptions): Promise<Readonly<{
        model: "purchase";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        asset: import("@metaplex-foundation/js/dist/types/plugins").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins").NftWithToken;
        buyerAddress: import("@solana/web3.js").PublicKey;
        sellerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
    }>>;
    /** {@inheritDoc findPurchasesOperation} */
    findPurchases(input: FindPurchasesInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").FindPurchasesOutput>;
    /** {@inheritDoc getBuyerBalanceOperation} */
    getBuyerBalance(input: GetBuyerBalanceInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/types").SolAmount>;
    /** {@inheritDoc createListingOperation} */
    list(input: CreateListingInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").CreateListingOutput>;
    /** {@inheritDoc loadBidOperation} */
    loadBid(input: LoadBidInput, options?: OperationOptions): Promise<Readonly<{
        model: "bid";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        buyerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
        purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
        canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
    } & {
        isPublic: false;
        asset: import("@metaplex-foundation/js/dist/types/plugins").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins").NftWithToken;
    }> | Readonly<{
        model: "bid";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        buyerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
        purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
        canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
    } & {
        isPublic: true;
        asset: import("@metaplex-foundation/js/dist/types/plugins").Sft | import("@metaplex-foundation/js/dist/types/plugins").Nft;
    }>>;
    /** {@inheritDoc loadListingOperation} */
    loadListing(input: LoadListingInput, options?: OperationOptions): Promise<Readonly<{
        model: "listing";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        asset: import("@metaplex-foundation/js/dist/types/plugins").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins").NftWithToken;
        tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
        sellerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
        purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
        canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
    }>>;
    /** {@inheritDoc loadPurchaseOperation} */
    loadPurchase(input: LoadPurchaseInput, options?: OperationOptions): Promise<Readonly<{
        model: "purchase";
        lazy: false;
        auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models").AuctionHouse;
        asset: import("@metaplex-foundation/js/dist/types/plugins").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins").NftWithToken;
        buyerAddress: import("@solana/web3.js").PublicKey;
        sellerAddress: import("@solana/web3.js").PublicKey;
        bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        receiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
        price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
        createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
    }>>;
    /** {@inheritDoc directSellOperation} */
    sell(input: DirectSellInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").DirectSellOutput>;
    /** {@inheritDoc updateAuctionHouseOperation} */
    update(input: UpdateAuctionHouseInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").UpdateAuctionHouseOutput>;
    /** {@inheritDoc withdrawFromBuyerAccountOperation} */
    withdrawFromBuyerAccount(input: WithdrawFromBuyerAccountInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").WithdrawFromBuyerAccountOutput>;
    /** {@inheritDoc withdrawFromFeeAccountOperation} */
    withdrawFromFeeAccount(input: WithdrawFromFeeAccountInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").WithdrawFromFeeAccountOutput>;
    /** {@inheritDoc withdrawFromTreasuryAccountOperation} */
    withdrawFromTreasuryAccount(input: WithdrawFromTreasuryAccountInput, options?: OperationOptions): Promise<import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/operations").WithdrawFromTreasuryAccountOutput>;
}
