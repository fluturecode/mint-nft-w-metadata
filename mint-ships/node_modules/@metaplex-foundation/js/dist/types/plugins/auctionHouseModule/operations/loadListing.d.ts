import { LazyListing, Listing } from '@metaplex-foundation/js/dist/types/plugins/auctionHouseModule/models/Listing';
import { Operation, OperationHandler } from '@metaplex-foundation/js/dist/types/types';
declare const Key: "LoadListingOperation";
/**
 * Transforms a `LazyListing` model into a `Listing` model.
 *
 * ```ts
 * const listing = await metaplex
 *   .auctionHouse()
 *   .loadListing({ lazyListing };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const loadListingOperation: import("@metaplex-foundation/js/dist/types/types").OperationConstructor<LoadListingOperation, "LoadListingOperation", LoadListingInput, Readonly<{
    model: "listing";
    lazy: false;
    auctionHouse: import("@metaplex-foundation/js/dist/types/plugins/auctionHouseModule").AuctionHouse;
    asset: import("@metaplex-foundation/js/dist/types/plugins/nftModule").SftWithToken | import("@metaplex-foundation/js/dist/types/plugins/nftModule").NftWithToken;
    tradeStateAddress: import("@metaplex-foundation/js/dist/types/types").Pda;
    sellerAddress: import("@solana/web3.js").PublicKey;
    bookkeeperAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
    receiptAddress: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").Pda>;
    purchaseReceiptAddress: import("@metaplex-foundation/js").Option<import("@solana/web3.js").PublicKey>;
    price: import("@metaplex-foundation/js/dist/types/types").SolAmount | import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
    tokens: import("@metaplex-foundation/js/dist/types/types").SplTokenAmount;
    createdAt: import("@metaplex-foundation/js/dist/types/types").DateTime;
    canceledAt: import("@metaplex-foundation/js").Option<import("@metaplex-foundation/js/dist/types/types").DateTime>;
}>>;
/**
 * @group Operations
 * @category Types
 */
export type LoadListingOperation = Operation<typeof Key, LoadListingInput, Listing>;
/**
 * @group Operations
 * @category Inputs
 */
export type LoadListingInput = {
    /** The `LazyListing` model to transform into the `Listing`.  */
    lazyListing: LazyListing;
    /**
     * Whether or not we should fetch the JSON Metadata for the NFT or SFT.
     *
     * @defaultValue `true`
     */
    loadJsonMetadata?: boolean;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const loadListingOperationHandler: OperationHandler<LoadListingOperation>;
export {};
